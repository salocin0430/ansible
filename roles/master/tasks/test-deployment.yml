---
# Clonar y preparar la aplicación web en NFS
- name: Clone and setup web application
  shell: |
    cd {{ nfs_path }}
    rm -rf *  # Limpiar el directorio primero
    git clone https://github.com/salocin0430/COS_PHP_WEB.git
    mv COS_PHP_WEB/* .
    rm -rf COS_PHP_WEB
    # Ajustar permisos para Apache
    chown -R www-data:www-data {{ nfs_path }}
    chmod -R 755 {{ nfs_path }}
    find {{ nfs_path }} -type f -exec chmod 644 {} \;
    find {{ nfs_path }} -type d -exec chmod 755 {} \;
  delegate_to: nfs-server
  tags:
    - test-deploy

# Desplegar la aplicación PHP
- name: Create PHP web deployment
  copy:
    dest: /tmp/php-webapp.yaml
    content: |
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: php-webapp
      spec:
        replicas: 3
        selector:
          matchLabels:
            app: php-webapp
        template:
          metadata:
            labels:
              app: php-webapp
          spec:
            containers:
            - name: php-apache
              image: php:7.4-apache
              ports:
              - containerPort: 80
              volumeMounts:
              - name: webapp-volume
                mountPath: /var/www/html
            volumes:
            - name: webapp-volume
              persistentVolumeClaim:
                claimName: nfs-pvc-test
      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: php-webapp-service
        annotations:
          metallb.universe.tf/address-pool: first-pool
      spec:
        type: LoadBalancer
        selector:
          app: php-webapp
        ports:
        - port: 80
          targetPort: 80
  tags:
    - test-deploy

- name: Apply PHP deployment
  command: kubectl apply -f /tmp/php-webapp.yaml
  tags:
    - test-deploy

- name: Check deployment status
  shell: |
    echo "=== Pod Status ==="
    kubectl get pods -l app=php-webapp -o wide
    echo "\n=== Pod Logs ==="
    for pod in $(kubectl get pods -l app=php-webapp -o name); do
      echo "\nLogs for $pod:"
      kubectl logs $pod --tail=20
    done
    echo "\n=== Pod Description ==="
    kubectl describe pods -l app=php-webapp
    echo "\n=== Recent Events ==="
    kubectl get events --sort-by='.lastTimestamp' | tail -n 20
  register: debug_info
  tags:
    - test-deploy

- name: Display debug information
  debug:
    var: debug_info.stdout_lines
  tags:
    - test-deploy

- name: Wait for deployment
  shell: |
    kubectl rollout status deployment/php-webapp
  register: deployment_status
  until: deployment_status.rc == 0
  retries: 30
  delay: 10
  tags:
    - test-deploy

- name: Get service IP
  shell: |
    kubectl get service php-webapp-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
  register: service_ip
  until: service_ip.stdout != ""
  retries: 30
  delay: 10
  tags:
    - test-deploy

- name: Show deployment information
  debug:
    msg: |
      PHP Web application has been deployed!
      You can access it at: http://{{ service_ip.stdout }}
      Try the matrix test at: http://{{ service_ip.stdout }}/matrix.php?size=400
      
      To see pod distribution:
      kubectl get pods -l app=php-webapp -o wide
  tags:
    - test-deploy

- name: Check failing pods
  shell: |
    echo "=== Failed Pods Logs ==="
    for pod in $(kubectl get pods -l app=php-webapp | grep -E 'Error|CrashLoopBackOff' | awk '{print $1}'); do
      echo "\nLogs for $pod:"
      kubectl logs $pod
      echo "\nDescription for $pod:"
      kubectl describe pod $pod
    done
  register: pod_logs
  tags:
    - test-deploy

- name: Display pod logs
  debug:
    var: pod_logs.stdout_lines
  tags:
    - test-deploy 