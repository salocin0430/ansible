---
- name: Create metrics-server manifest
  copy:
    dest: /tmp/metrics-server.yaml
    content: |
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        labels:
          k8s-app: metrics-server
        name: metrics-server
        namespace: kube-system
      ---
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        labels:
          k8s-app: metrics-server
          rbac.authorization.k8s.io/aggregate-to-admin: "true"
          rbac.authorization.k8s.io/aggregate-to-edit: "true"
          rbac.authorization.k8s.io/aggregate-to-view: "true"
        name: system:aggregated-metrics-reader
      rules:
      - apiGroups: ["metrics.k8s.io"]
        resources: ["pods", "nodes"]
        verbs: ["get", "list", "watch"]
      ---
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        labels:
          k8s-app: metrics-server
        name: system:metrics-server
      rules:
      - apiGroups: [""]
        resources: ["nodes/metrics"]
        verbs: ["get"]
      - apiGroups: [""]
        resources: ["pods", "nodes"]
        verbs: ["get", "list", "watch"]
      ---
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        labels:
          k8s-app: metrics-server
        name: metrics-server-auth-reader
        namespace: kube-system
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: extension-apiserver-authentication-reader
      subjects:
      - kind: ServiceAccount
        name: metrics-server
        namespace: kube-system
      ---
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        labels:
          k8s-app: metrics-server
        name: metrics-server:system:auth-delegator
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: system:auth-delegator
      subjects:
      - kind: ServiceAccount
        name: metrics-server
        namespace: kube-system
      ---
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        labels:
          k8s-app: metrics-server
        name: system:metrics-server
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: system:metrics-server
      subjects:
      - kind: ServiceAccount
        name: metrics-server
        namespace: kube-system
      ---
      apiVersion: v1
      kind: Service
      metadata:
        labels:
          k8s-app: metrics-server
        name: metrics-server
        namespace: kube-system
      spec:
        ports:
        - name: https
          port: 443
          protocol: TCP
          targetPort: https
        selector:
          k8s-app: metrics-server
      ---
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        labels:
          k8s-app: metrics-server
        name: metrics-server
        namespace: kube-system
      spec:
        selector:
          matchLabels:
            k8s-app: metrics-server
        strategy:
          rollingUpdate:
            maxUnavailable: 0
        template:
          metadata:
            labels:
              k8s-app: metrics-server
          spec:
            containers:
            - args:
              - --cert-dir=/tmp
              - --secure-port=4443
              - --kubelet-preferred-address-types=InternalIP
              - --kubelet-insecure-tls
              - --metric-resolution=15s
              command:
              - /metrics-server
              image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
              imagePullPolicy: IfNotPresent
              name: metrics-server
              ports:
              - containerPort: 4443
                name: https
                protocol: TCP
              securityContext:
                runAsNonRoot: true
                runAsUser: 1000
                readOnlyRootFilesystem: true
              volumeMounts:
              - mountPath: /tmp
                name: tmp-dir
            hostNetwork: true
            nodeSelector:
              kubernetes.io/hostname: k8s-master
            priorityClassName: system-cluster-critical
            serviceAccountName: metrics-server
            volumes:
            - emptyDir: {}
              name: tmp-dir

- name: Delete existing metrics-server if any
  command: kubectl delete -f /tmp/metrics-server.yaml
  ignore_errors: yes

- name: Wait for deletion
  shell: |
    kubectl -n kube-system wait --for=delete deployment/metrics-server --timeout=60s
  ignore_errors: yes

- name: Apply metrics-server manifest
  command: kubectl apply -f /tmp/metrics-server.yaml

- name: Wait for metrics-server pod
  shell: |
    kubectl -n kube-system wait --for=condition=ready pod -l k8s-app=metrics-server --timeout=120s
  register: pod_status
  until: pod_status.rc == 0
  retries: 30
  delay: 10

- name: Check metrics-server logs
  shell: |
    echo "=== Metrics Server Logs ==="
    kubectl -n kube-system logs -l k8s-app=metrics-server --tail=50
  register: metrics_logs

- name: Display metrics-server logs
  debug:
    var: metrics_logs.stdout_lines

- name: Wait for API to be available
  shell: |
    kubectl get --raw "/apis/metrics.k8s.io/v1beta1/nodes"
  register: api_check
  until: api_check.rc == 0
  retries: 12
  delay: 10

- name: Final verification
  shell: |
    echo "=== Metrics Server Status ==="
    kubectl get deployment metrics-server -n kube-system
    echo "\n=== Node Metrics ==="
    kubectl top nodes
    echo "\n=== Pod Metrics ==="
    kubectl top pods -A
  register: final_check
  ignore_errors: yes

- name: Display final status
  debug:
    var: final_check.stdout_lines 