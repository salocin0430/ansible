---
- name: Create metrics-server manifest
  copy:
    dest: /tmp/components.yaml
    content: |
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: metrics-server
        namespace: kube-system
      ---
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: system:metrics-server
      rules:
      - apiGroups: [""]
        resources: ["nodes/stats", "nodes/metrics", "nodes/proxy"]
        verbs: ["get", "list", "watch", "create"]
      - apiGroups: [""]
        resources: ["pods", "nodes", "namespaces", "configmaps"]
        verbs: ["get", "list", "watch"]
      - apiGroups: ["authorization.k8s.io"]
        resources: ["subjectaccessreviews"]
        verbs: ["create"]
      - apiGroups: ["authentication.k8s.io"]
        resources: ["tokenreviews"]
        verbs: ["create"]
      ---
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: system:metrics-server
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: system:metrics-server
      subjects:
      - kind: ServiceAccount
        name: metrics-server
        namespace: kube-system
      ---
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: metrics-server
        namespace: kube-system
      spec:
        selector:
          matchLabels:
            k8s-app: metrics-server
        template:
          metadata:
            labels:
              k8s-app: metrics-server
          spec:
            hostNetwork: true
            nodeSelector:
              kubernetes.io/hostname: k8s-master
            tolerations:
            - key: node-role.kubernetes.io/control-plane
              operator: Exists
              effect: NoSchedule
            containers:
            - args:
              - --cert-dir=/tmp
              - --secure-port=4443
              - --kubelet-preferred-address-types=InternalIP
              - --kubelet-insecure-tls
              - --kubelet-use-node-status-port
              - --metric-resolution=30s
              - --authorization-always-allow-paths=/livez,/readyz
              image: registry.k8s.io/metrics-server/metrics-server:v0.7.2
              name: metrics-server
              ports:
              - containerPort: 4443
                protocol: TCP
              securityContext:
                runAsNonRoot: true
                runAsUser: 1000
              volumeMounts:
              - mountPath: /tmp
                name: tmp-dir
            serviceAccountName: metrics-server
            volumes:
            - emptyDir: {}
              name: tmp-dir

- name: Remove existing metrics-server
  shell: |
    kubectl delete -f /tmp/components.yaml --ignore-not-found=true
    sleep 5
  ignore_errors: yes

- name: Deploy Metrics Server
  command: kubectl apply -f /tmp/components.yaml

- name: Wait for pod on master
  shell: |
    echo "Waiting for metrics-server to start on master node..."
    for i in $(seq 1 12); do
      if kubectl -n kube-system get pods -l k8s-app=metrics-server -o wide | grep k8s-master; then
        break
      fi
      echo "Waiting... attempt $i"
      sleep 10
    done
  register: wait_result

- name: Show pod status
  shell: |
    echo "=== Pod Status and Location ==="
    kubectl -n kube-system get pods -l k8s-app=metrics-server -o wide
    echo "\n=== Pod Logs ==="
    kubectl -n kube-system logs -l k8s-app=metrics-server
  register: status
  ignore_errors: yes

- name: Display status
  debug:
    var: status.stdout_lines

- name: Add debug task
  shell: |
    echo "=== Network Status ==="
    netstat -tulpn | grep 4443
    echo "\n=== Pod Status ==="
    kubectl -n kube-system get pods -l k8s-app=metrics-server -o wide
    echo "\n=== Node Status ==="
    kubectl get nodes -o wide
    echo "\n=== Testing Connection ==="
    curl -k https://localhost:4443/metrics
  register: debug_info
  ignore_errors: yes

- name: Show debug info
  debug:
    var: debug_info.stdout_lines 